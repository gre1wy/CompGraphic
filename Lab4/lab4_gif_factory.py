import matplotlib.pyplot as plt
import numpy as np
import imageio

def generate_fractal(rules: dict, iterations: int):
    x, y = [0], [0]
    if 'a' in rules[0]:
        if 'p' in rules[0]:
            for _ in range(iterations):
                rule = np.random.choice(rules, p=[rule['p'] for rule in rules])
                x1 = rule['a'] * x[-1] + rule['b'] * y[-1] + rule['e']
                y1 = rule['c'] * x[-1] + rule['d'] * y[-1] + rule['f']
                x.append(x1)
                y.append(y1)
        else:
            for _ in range(iterations):
                rule = np.random.choice(rules)
                x1 = rule['a'] * x[-1] + rule['b'] * y[-1] + rule['e']
                y1 = rule['c'] * x[-1] + rule['d'] * y[-1] + rule['f']
                x.append(x1)
                y.append(y1)
    else:
        if 'p' in rules[0]:
            for _ in range(iterations):
                rule = np.random.choice(rules, p=[rule['p'] for rule in rules])
                x1 = rule['r'] *np.cos(rule['theta'])* x[-1] - rule['s']*np.sin(rule['phi'])*y[-1] + rule['e']
                y1 = -rule['r']*np.sin(rule['theta']) * x[-1] + rule['s']*np.cos(rule['phi'])* y[-1] + rule['f']
                x.append(x1)
                y.append(y1)
        else:
            for _ in range(iterations):
                rule = np.random.choice(rules)
                x1 = rule['r'] *np.cos(rule['theta'])* x[-1] - rule['s']*np.sin(rule['phi'])*y[-1] + rule['e']
                y1 = -rule['r']*np.sin(rule['theta']) * x[-1] + rule['s']*np.cos(rule['phi'])* y[-1] + rule['f']
                x.append(x1)
                y.append(y1)

    return x, y

def display_fractal(rules: dict, iterations: int, delay: float, pixels: int, filename='fractal.gif'):
    x, y = generate_fractal(rules, iterations)
    frames = []
    plt.figure()
    annotation = None 
    for i in range(iterations+1):
        if i % pixels == 0:
            if annotation is not None:
                annotation.remove()
            plt.plot(x[i:i+pixels], y[i:i+pixels], '*', color='green', markersize=0.5)
            plt.title('Fractal')
            annotation = plt.annotate(f'Pixels drawn: {i}', xy=(0, 0), fontsize=10, color='red')
            # plt.draw()
            plt.pause(delay)
            # Сохраняем текущий кадр
            plt.savefig('temp_frame.png')
            frames.append(imageio.imread('temp_frame.png'))
    imageio.mimsave(filename, frames, duration=delay)
    plt.close()
rules_list = []
# Кленовий лист
rules = [
    {'a': 0.1400, 'b': 0.0100, 'c': 0.0000, 'd': 0.5100, 'e': -0.0800, 'f': -1.3100},
    {'a': 0.4300, 'b': 0.5200, 'c': -0.4500, 'd': 0.5000, 'e': 1.4900, 'f': -0.7500},
    {'a': 0.4500, 'b': -0.4900, 'c': 0.4700, 'd': 0.4700, 'e': -1.6200, 'f': -0.7400},
    {'a': 0.4900, 'b': 0.0000, 'c': 0.0000, 'd': 0.5100, 'e': 0.0200, 'f': 1.6200}
]
rules_list.append(rules)
# Спіраль
rules = [
    {'a': 0.787879, 'b': -0.424242, 'c': 0.242424, 'd': 0.859848, 'e': 1.758647, 'f': 1.408065, 'p': 0.90},
    {'a': -0.121212, 'b': 0.257576, 'c': 0.151515, 'd': 0.053030, 'e': -6.721654, 'f': 1.377236, 'p': 0.05},
    {'a': 0.181818, 'b': -0.136364, 'c': 0.090909, 'd': 0.181818, 'e': 6.086107, 'f': 1.568035, 'p': 0.05}
]
rules_list.append(rules)
# Mandelbrot-like
rules = [
    {'a': 0.2020, 'b': -0.8050, 'c': -0.6890, 'd': -0.3420, 'e': -0.3730, 'f': -0.6530},
    {'a': 0.1380, 'b': 0.6650, 'c': -0.5020, 'd': -0.2220, 'e': 0.6600, 'f': -0.2770}
]
rules_list.append(rules)
# Фрактальне дерево
rules = [
    {'a': 0.0500, 'b': 0.0000, 'c': 0.0000, 'd': 0.4000, 'e': -0.0600, 'f': -0.4700},
    {'a': -0.0500, 'b': 0.0000, 'c': 0.0000, 'd': -0.4000, 'e': -0.0600, 'f': -0.4700},
    {'a': 0.0300, 'b': -0.1400, 'c': 0.0000, 'd': 0.2600, 'e': -0.1600, 'f': -0.0100},
    {'a': -0.0300, 'b': 0.1400, 'c': 0.0000, 'd': -0.2600, 'e': -0.1600, 'f': -0.0100},
    {'a': 0.5600, 'b': 0.4400, 'c': -0.3700, 'd': 0.5100, 'e': 0.3000, 'f': 0.1500},
    {'a': 0.1900, 'b': 0.0700, 'c': -0.1000, 'd': 0.1500, 'e': -0.2000, 'f': 0.2800},
    {'a': -0.3300, 'b': -0.3400, 'c': -0.3300, 'd': 0.3400, 'e': -0.5400, 'f': 0.3900}
]
rules_list.append(rules)
# Другий варіант фрактального дерева
rules = [
    {'r': 0.0500, 's': 0.6000, 'theta': 0.0000, 'phi': 0.0000, 'e': 0.0000, 'f': 0.0000},
    {'r': 0.0500, 's': -0.5000, 'theta': 0.0000, 'phi': 0.0000, 'e': 0.0000, 'f': 1.0000},
    {'r': 0.6000, 's': 0.5000, 'theta': 0.6980, 'phi': 0.6980, 'e': 0.0000, 'f': 0.6000},
    {'r': 0.5000, 's': 0.4500, 'theta': 0.3490, 'phi': 0.3492, 'e': 0.0000, 'f': 1.1000},
    {'r': 0.5000, 's': 0.5500, 'theta': -0.5240, 'phi': -0.5240, 'e': 0.0000, 'f': 1.0000},
    {'r': 0.5500, 's': 0.4000, 'theta': -0.6980, 'phi': -0.6980, 'e': 0.0000, 'f': 0.7000}
]
# Третій варіант фрактального дерева
rules = [
    {'a': 0.0100, 'b': 0.0000, 'c': 0.0000, 'd': 0.4500, 'e': 0.0000, 'f': 0.0000},
    {'a': -0.0100, 'b': 0.0000, 'c': 0.0000, 'd': -0.4500, 'e': 0.0000, 'f': 0.4000},
    {'a': 0.4200, 'b': -0.4200, 'c': 0.4200, 'd': 0.4200, 'e': 0.0000, 'f': 0.4000},
    {'a': 0.4200, 'b': 0.4200, 'c': -0.4200, 'd': 0.4200, 'e': 0.0000, 'f': 0.4000}
]
rules_list.append(rules)
# Четвертий варіант фрактального дерева
rules = [
    {'a': 0.1950, 'b': -0.4880, 'c': 0.3440, 'd': 0.4430, 'e': 0.4431, 'f': 0.2452, 'p': 0.2},
    {'a': 0.4620, 'b': 0.4140, 'c': -0.2520, 'd': 0.3610, 'e': 0.2511, 'f': 0.5692, 'p': 0.2},
    {'a': -0.6370, 'b': 0.0000, 'c': 0.0000, 'd': 0.5010, 'e': 0.8562, 'f': 0.2512, 'p': 0.2},
    {'a': -0.0350, 'b': 0.0700, 'c': -0.4690, 'd': 0.0220, 'e': 0.4884, 'f': 0.5069, 'p': 0.2},
    {'a': -0.0580, 'b': -0.0700, 'c': 0.4530, 'd': -0.1110, 'e': 0.5976, 'f': 0.0969, 'p': 0.2}
]
rules_list.append(rules)
# Фрактальний лист
rules = [
    {'a': 0.0000, 'b': 0.2439, 'c': 0.0000, 'd': 0.3053, 'e': 0.0000, 'f': 0.0000},
    {'a': 0.7248, 'b': 0.0337, 'c': -0.0253, 'd': 0.7426, 'e': 0.2060, 'f': 0.2538},
    {'a': 0.1583, 'b': -0.1297, 'c': 0.3550, 'd': 0.3676, 'e': 0.1383, 'f': 0.1750},
    {'a': 0.3386, 'b': 0.3694, 'c': 0.2227, 'd': -0.0756, 'e': 0.0679, 'f': 0.0826}
]
rules_list.append(rules)
# Фрактал пісочний долар-сніжинка
rules = [
    {'a': 0.38200, 'b': 0.00000, 'c': 0.00000, 'd': 0.38200, 'e': 0.30900, 'f': 0.57000},
    {'a': 0.11800, 'b': -0.36330, 'c': 0.36330, 'd': 0.11800, 'e': 0.36330, 'f': 0.33060},
    {'a': 0.11800, 'b': 0.36330, 'c': -0.36330, 'd': 0.11800, 'e': 0.51870, 'f': 0.69400},
    {'a': -0.30900, 'b': -0.22450, 'c': 0.22450, 'd': -0.30900, 'e': 0.60700, 'f': 0.30900},
    {'a': -0.30900, 'b': 0.22450, 'c': -0.22450, 'd': -0.30900, 'e': 0.70160, 'f': 0.53350},
    {'a': 0.38200, 'b': 0.00000, 'c': 0.00000, 'd': -0.38200, 'e': 0.30900, 'f': 0.67700}
]
rules_list.append(rules)

# Фрактал папороті
rules = [
    {'a': 0.0, 'b': 0.0, 'c': 0.0, 'd': 0.16, 'e': 0.0, 'f': 0.0, 'p': 0.1},
    {'a': 0.2, 'b': -0.26, 'c': 0.23, 'd': 0.22, 'e': 0.0, 'f': 1.6, 'p': 0.08},
    {'a': -0.15, 'b': 0.28, 'c': 0.26, 'd': 0.24, 'e': 0.0, 'f': 0.44, 'p': 0.08},
    {'a': 0.75, 'b': 0.04, 'c': -0.04, 'd': 0.85, 'e': 0.0, 'f': 1.6, 'p': 0.74}
]
rules_list.append(rules)
# Фрактал X
rules = [
    {'a': 0.0, 'b': 0.0, 'c': 0.0, 'd': 0.16, 'e': 0.0, 'f': 0.0, 'p': 0.01},
    {'a': 0.2, 'b': -0.26, 'c': 0.23, 'd': 0.22, 'e': 0.0, 'f': 1.6, 'p': 0.07},
    {'a': -0.15, 'b': 0.28, 'c': 0.26, 'd': 0.24, 'e': 0.0, 'f': 0.44, 'p': 0.07},
    {'a': 0.85, 'b': 0.04, 'c': -0.04, 'd': 0.85, 'e': 0.0, 'f': 1.6, 'p': 0.85}
]
rules_list.append(rules)
# IFS Chaos Text
rules = [
    {'a': 0, 'b': 0.053, 'c': -0.429, 'd': 0, 'e': -7.083, 'f': 5.43},
    {'a': 0.143, 'b': 0, 'c': 0, 'd': -0.053, 'e': -5.619, 'f': 8.513},
    {'a': 0.143, 'b': 0, 'c': 0, 'd': 0.083, 'e': -5.619, 'f': 2.057},
    {'a': 0, 'b': 0.053, 'c': 0.429, 'd': 0, 'e': -3.952, 'f': 5.43},
    {'a': 0.119, 'b': 0, 'c': 0, 'd': 0.053, 'e': -2.555, 'f': 4.536},
    {'a': -0.0123806, 'b': -0.0649723, 'c': 0.423819, 'd': 0.00189797, 'e': -1.226, 'f': 5.235},
    {'a': 0.0852291, 'b': 0.0506328, 'c': 0.420449, 'd': 0.0156626, 'e': -0.421, 'f': 4.569},
    {'a': 0.104432, 'b': 0.00529117, 'c': 0.0570516, 'd': 0.0527352, 'e': 0.976, 'f': 8.113},
    {'a': -0.00814186, 'b': -0.0417935, 'c': 0.423922, 'd': 0.00415972, 'e': 1.934, 'f': 5.37},
    {'a': 0.093, 'b': 0, 'c': 0, 'd': 0.053, 'e': 0.861, 'f': 4.536},
    {'a': 0, 'b': 0.053, 'c': -0.429, 'd': 0, 'e': 2.447, 'f': 5.43},
    {'a': 0.119, 'b': 0, 'c': 0, 'd': -0.053, 'e': 3.363, 'f': 8.513},
    {'a': 0.119, 'b': 0, 'c': 0, 'd': 0.053, 'e': 3.363, 'f': 1.487},
    {'a': 0, 'b': 0.053, 'c': 0.429, 'd': 0, 'e': 3.972, 'f': 4.569},
    {'a': 0.123998, 'b': -0.00183957, 'c': 0.000691208, 'd': 0.0629731, 'e': 6.275, 'f': 7.716},
    {'a': 0, 'b': 0.053, 'c': 0.167, 'd': 0, 'e': 5.215, 'f': 6.483},
    {'a': 0.071, 'b': 0, 'c': 0, 'd': 0.053, 'e': 6.279, 'f': 5.298},
    {'a': 0, 'b': -0.053, 'c': -0.238, 'd': 0, 'e': 6.805, 'f': 3.714},
    {'a': -0.121, 'b': 0, 'c': 0, 'd': 0.053, 'e': 5.941, 'f': 1.487}
]
rules_list.append(rules)
# IFS Dragon
rules = [
    {'a': 0.824074, 'b': 0.281428, 'c': -0.212346, 'd': 0.864198, 'e': -1.882290, 'f': -0.110607, 'p': 0.8},
    {'a': 0.088272, 'b': 0.520988, 'c': -0.463889, 'd': -0.377778, 'e': 0.785360, 'f': 8.095795, 'p': 0.2}
]
rules_list.append(rules)
# IFS Гілка
rules = [
    {'a': 0.387, 'b': 0.430, 'c': 0.430, 'd': -0.387, 'e': 0.2560, 'f': 0.5220, 'p': 1/3},
    {'a': 0.441, 'b': -0.091, 'c': -0.009, 'd': -0.322, 'e': 0.4219, 'f': 0.5059, 'p': 1/3},
    {'a': -0.468, 'b': 0.020, 'c': -0.113, 'd': 0.015, 'e': 0.4, 'f': 0.4, 'p': 1/3}
]
rules_list.append(rules)
# IFS Ялинка
rules = [
    {'a': 0.0, 'b': -0.5, 'c': 0.5, 'd': 0.0, 'e': 0.5, 'f': 0.0, 'p': 1/3},
    {'a': 0.0, 'b': 0.5, 'c': -0.5, 'd': 0.0, 'e': 0.5, 'f': 0.5, 'p': 1/3},
    {'a': 0.5, 'b': 0.0, 'c': 0.0, 'd': 0.5, 'e': 0.25, 'f': 0.5, 'p': 1/3}
]
rules_list.append(rules)

i = 1
for rules in rules_list:
    display_fractal(rules, iterations=100000, delay=0.0001, pixels=1000, filename=f'CompGraphic/Lab4/gifs/fractal_animation_{i}.gif')
    i+=1
